Matrices and Vectors

MATRIX:
A rectangular Array of numbers written between square brackets.
A 2-D Array with a set number of rows and columns.

Dimensions of the Matrix: Written as :

NUMBER OF ROWS X NUMBER OF COLUMNS.

"4 x 2 matrix, 1 x 10 matrix"

Or R^4x2 OR R^1X10
R just refers to the matrix, with the superscript it says, "Matrix of dimensions..."
How to refer to specific elements of a matrix? One value/number in the array?

A   
 xy
 
 Where A is the name of the matrix you are tyring to access:
 
 A = [1,2,3]
 
 And x is the row, y is the column.
 To access the number 2 for example,
 
A    = 2
  12
  
If the row #/column # does not exist, then the value of the element you try to access is undefined. 

VECTORS:
What is a vector?
A vector is just a special type of matrix. 
A vector is just a matrix with ONE COLUMN.
A vector is just a matrix of dimensions n X 1, where n is number of rows. n, or number of rows, determines how many dimensions your vector is.


IE)

    [3]
V = |2|     V is a 3 X 1 Matrix. With Vectors, you can just drop the column in describing dimensions. R^3 Matrix.
    [2]     Can also be written as, V is a 3 Dimensional Vector.
 
 How to refer to elements of a vector? Same as referring to elements of a matrix, but drop the column.
 
 A  
  i
 Where A is the vector you try to access, and i is the row number. i is the convention used for accessing vectors. 
 
 There are 2 different conventions for accessing vector columns.
 
 Some use "1-indexed vectors", and some used "0-indexed vectors". 
 "1-indexed vectors" have the first vector row start as row 1. Likewise, "0-indexed vectors" start with vector row 0. (like python lists)
 
 0-indexed is more common, so indicate if you use 1-indexed vectors if you are.
 
 MORE CONVENTION:
 We use uppercase letters to name matrices, amd lowercase letters to name vectors.
 
 In high level coding languages, such as OCTAVE/MATLAB,
 
 You can usually create matrices with notation like
 A = [1, 2, 3; 4, 5, 6; 7, 8, 9; 10, 11, 12]
 Where commas delimit columns and semicolons delimit rows. 
 
 With similar logic, you can create vectors like
 v = [1;2;3] 
With only semicolons, as vectors only have one row. 

size() is a function that returns a 2 column 1 rowed matrix, the dimensions of the matrix/vector that is passed inside the ()

size() can be assigned to a variable, which can be a vector, or assigned to another matrix of dimensions 2 X 1, which will overwrite its elements.


MATRIX ADDITION/SUBTRACTION: Adding or subtracting 2 matrices.

How to add? Add each individual element of one matrix to each respective element of the other matrix.
Matrix Addition ONLY WORKS if the 2 matrices have the SAME DIMENSIONS.

You get an error if they do not have the same dimensions.

Subtraction works the exact same as addition, also does not work if they do not have same dimensions. 

SCALAR MULTIPLICATION/DIVISION: Multiplying a matrix with a real number (scalar: single value, not a matrix)

     [1 2]
3 X  |2 3|
     [2 6]
How to multiply? Multiply each individual element of the matrix by the value of the scalar. 

Division works the same way, divides each individual element by the scalar.

Scalar Multiplication/Division Works in PEMDAS with Matrix Addition/Subtraction.
When you matrix add/subtract vectors, you can also call it vector addition/subtraction.

In code/matlab, with 2 matrices/scalars/vectors assigned to variables, you can just do normal operations to indicate matrix addition/scalar multiplication.

Adding a scalar to a matrix adds that scalar value to every value of the matrix.

MATRIX MULTIPLICATION: Multiplying 2 matrices together

Let's do a simpler special case first: Matrix-Vector Multiplication. Multiplying a matrix and a vector together. 
Result is a vector. Matrix-Vector multiplication ONLY WORKS if the number of columns of the Matrix = the number of ROWS of the Vector.

The end result vector has the dimensions of the number of rows of the matrix. 
TO MULTIPLY:
Multiply in rows in rows. Multiply row 1 of the matrix to the vector first, then row 2 to the vector... to row n to the same vector.

How to multiply the row of the matrix to the vector? Take the first column of the row and multiply it by the first row of the vector.
Take the second column of the row and multiply it by the second column of the vector... take the nth column of one row of the matrix and multiply it to the nth column of the vector.
THEN, add the all the elements of the row together. This value becomes the first row of the result vector.

This is why matrix-vector multiplication needs the same number of columns in the matrix as rows in the vector. 

CALCULATE THE DIMENSIONS OF THE RESULT VECTOR OF VECTOR-MATRIX MULTIPLICATION BEFORE 

Matrices Applied!!!

SUCH A COOL TRICK!!!

For ML, often times you need to test the hypothesis (h(theta1) = theta1(x))
To calculate error you need to calculate between actual y values of points and predicted y values from the hypothesis equations.
TO GET Predicted Y, you need to plug x into the hypothesis.

This plugging in can take multiple tedious lines of code.

BUT IT CAN BE SOOOOO SIMPLE WITH MATRICES!!!

If you turn the x-coordinates into a matrix and the parameters of the hypothesis into a vector, if you matrix-vector multiply them, you instantly get a vector with all predicted y-coordinates.

WITH ONE LINE OF CODE! JUST MULTIPLY THE 2!!!
More efficient and simpler than long for loops.

When doing this strategy, you need same number of columns in the data point matrix as rows in the number of parameters, rows in the parameters vector.

Therefore, add columns of just 1 next to the column of x values to match the number of parameters.

In code, with high level language like MATLAB, matrix-vector multiplication is just one operation again.

Name of matrix X Name of Vector. Order Matters!!! must be matrix X vector

MATRIX-MATRIX MULTIPLICATION:

Key step for the normal equation to solve for cost function.

Only works when number of columns of matrix A = number of rows of matrix B.

m X n Matrix * n X O Matrix = m X O Matrix.

Result matrix has number of rows as the first matrix and the same number of columns as the second matrix. Find dimensions of results first.

As a vector is just a matrix with column 1, Matrix-Vector multiplication is just Matrix-Matrix multipication with O=1.

The trick to Matrix-Matrix multiplication is the exact same as Matrix-Vector multiplication, but the second matrix is broken step by step into multiple columns/vectors.

MatrixA * Column1MatrixB = Column1Result
MatrixA * Column2MatrixB = Column2Result
...
ith column of matrix C is obtained by multiplying matrix A with the ith column of matrix B. 

Apply to ML, trick!

You can test multiple hypothesis at the same time with Matrix-Matrix Mulitplication.

By taking x-values of the data points into a column, with added columns of 1 next to that column to account for number of paramenters in the hypothesis:
And taking the parameters of each hypothesis and making them into a row, with a new column for every hypothesis you need to test,

You can multiply these matrixes, where each column of the result matrix are the predicted y values from the hypothesis that is in the same column number in the hypothesis matrix.

ith column of matrix c is the predicted y coordinate of the hypothesis in the ith column of matrix b.
Just one line of code, one operation, a simple multiplication between 2 mapped matrices. 

Order doesnt matter with mutliplication with scalars, but does with matrices. 
VERY Different answers when multiply different orders, might not even work. 
Matrix Multiplication DOES NOT have communitive property.
Matrix Multiplication DOES have associative property.

Identity Property: Multiplying 1 doesnt change the number.

Matrix Multiplication DOES have identity property.

The "1" for matrices is called an identity matrix. 

Identity matrices, also denoted as I are matrices with same number of rows as columns. Diagonally across the matrix are 1. Everywhere else besides the diagonal are 0. 
The 1 X 1 identity matrix is just [1]

If you want to make an identity matrix that will not change a matrix when multiplied to it, just make one with the same number of rows and columns as the non-identity matrix's:...
Same as the non-identity matrix's COLUMNS if the order of multiplication is Non-identity * identity. 
Same as the non-identity matrix's ROWS if the order of multiplicatio is identity * Non-identity.

Unlike most matrices, where switching the order of their multiplication changes the value of the product, 
Nonidentity * I = I * Nonidentity = Nonidentity. 

Now, there are 2 other special matrix operations:

MATRIX INVERSE:
Any ordinary number multiplied by its inverse is equal to 1, the identity number.
(ordinary number * 1/ordinary number = 1)
However, not everything has an inverse: 0 has no inverse.
Square Matrix: A matrix with same number of rows as columns. 

Matrix Inverse is:
If a given matrix HAS an inverse, not all matrices have an inverse, and if the given matrix is a square matrix
Matrix(Matrix Inverse) = Identity Matrix
With most high level languages, you can calculate matrix inverse very easily with a function. 

What matrices don't have inverses? Complicated. But IE) Matrices of all 0 don't have inverses. 
Matrixes without inverses, "close to 0", are called degenerate matrices or singular.

Matrix Transpose is:
A matrix transpose is a function/operation.
Matrix Transpose basically flips the rows and columns of the matrix. 

Matrix Transpose of a matrix takes that matrix's rows and makes it a column of the transpose.
In this way, the dimensions of the matrix, the row and column numbers, swap. 

If A is an m X n matrix, and B is A^T, A transposed:

Then B is an n X m matrix where
B  = A
 ij   ji
 
Basically: rotating a matrix 90 degrees and flipping it across the y axis. 

The operator for transpose is '. Single quotation. 

If A is the name for matrix A, the transpose of A is A'. 

A_transpose = A'








